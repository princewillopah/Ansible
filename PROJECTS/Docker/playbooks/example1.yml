
# # ====================================================================================================================================================================================
# # install docker with default ubuntu user
# # ====================================================================================================================================================================================
# ---
# - name: Install Docker
#   hosts: web  # Replace with the target hosts or groups
#   become: yes 
#   tasks:
#     - name: Update package cache
#       apt:
#         update_cache: yes
#       when: ansible_os_family == 'Debian'  # Use appropriate condition for your OS
    
#     - name: Install Docker
#       apt:
#         name: docker.io
#         state: present
#       when: ansible_os_family == 'Debian'  # Use appropriate condition for your OS

#     - name: Install pip for Python 3      
#       apt:
#         name: python3-pip
#         state: present

#     - name: Install Docker python module for docker commands
#       pip:
#         name: 
#           - docker
#           - docker-compose    


# - name: Install Docker Compose 
#   hosts: web  # Replace with the target hosts or groups
#   become: yes 
#   gather_facts: false
#   tasks:
#     - name: Download Docker Compose binary
#       get_url:
#         # url: https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-{{lookup('pipe','uname -m')}}
#         url: https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64
#         dest: /usr/local/bin/docker-compose
#         mode: +x

#     - name: Verify Docker Compose version
#       command: docker-compose --version
#       register: compose_version_output
#       changed_when: false
#       failed_when: false

#     - name: Install Docker Compose if not installed
#       command: echo
#       args:
#         creates: /usr/local/bin/docker-compose
#       changed_when: false

#     - name: Add Docker Compose to PATH
#       lineinfile:
#         dest: ~/.bashrc
#         line: 'export PATH=\$PATH:/usr/local/bin'
#         state: present
#       when: "'No such file or directory' in compose_version_output.stdout"

#     - name: Reload the shell
#       command: source ~/.bashrc
#       when: "'No such file or directory' in compose_version_output.stdout"

# - name: Start the Docker service || ensure the "docker" group exists 
#   hosts: web  # Replace with the target hosts or groups
#   become: yes 
#   gather_facts: false
#   tasks:
#     - name: Start the Docker service
#       service:
#         name: docker
#         state: started
    
#     - name: Create the 'docker' group if it doesn't exist
#       group:
#         name: docker
#         state: present

# - name: Add user to the Docker group 
#   hosts: web  # Replace with the target hosts or groups
#   become: yes 
#   gather_facts: false
#   tasks:
#     - name: Add user to the Docker group
#       user:
#         name: ubuntu
#         groups: docker
#         append: yes
#     - name: Reconnect to server session
#       meta: reset_connection


# - name: Pull Nginx Docker image
#   hosts: web  # Replace with the target hosts or groups
#   gather_facts: false
#   vars:
#     container_name: my_nginx  # Define a variable for the container name
#     default_container_image: nginx:latest
#   tasks:
#     - name: Pull Nginx Docker image
#       community.docker.docker_image:
#         name: "{{ default_container_image }}"
#         source: pull

#     - name: Run Nginx Container
#       docker_container:
#         name: "{{ container_name }}"
#         image: "{{ default_container_image }}"
#         state: started
#         ports:
#           - "8080:80"




# ====================================================================================================================================================================================
# install docker with default created user
# ====================================================================================================================================================================================
# ---
# - name: Install Docker
#   hosts: web  # Replace with the target hosts or groups
#   become: yes 
#   tasks:
#     - name: Update package cache
#       apt:
#         update_cache: yes
#       when: ansible_os_family == 'Debian'  # Use appropriate condition for your OS
    
#     - name: Install Docker
#       apt:
#         name: docker.io
#         state: present
#       when: ansible_os_family == 'Debian'  # Use appropriate condition for your OS

#     - name: Install pip for Python 3      
#       apt:
#         name: python3-pip
#         state: present

#     - name: Install Docker python module for docker commands
#       pip:
#         name: 
#           - docker
#           - docker-compose    


# - name: Install Docker Compose 
#   hosts: web  # Replace with the target hosts or groups
#   become: yes 
#   gather_facts: false
#   tasks:
#     - name: Download Docker Compose binary
#       get_url:
#         # url: https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-{{lookup('pipe','uname -m')}}
#         url: https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64
#         dest: /usr/local/bin/docker-compose
#         mode: +x

#     - name: Verify Docker Compose version
#       command: docker-compose --version
#       register: compose_version_output
#       changed_when: false
#       failed_when: false

#     - name: Install Docker Compose if not installed
#       command: echo
#       args:
#         creates: /usr/local/bin/docker-compose
#       changed_when: false

#     - name: Add Docker Compose to PATH
#       lineinfile:
#         dest: ~/.bashrc
#         line: 'export PATH=\$PATH:/usr/local/bin'
#         state: present
#       when: "'No such file or directory' in compose_version_output.stdout"

#     - name: Reload the shell
#       command: source ~/.bashrc
#       when: "'No such file or directory' in compose_version_output.stdout"

# - name: Start the Docker service || ensure the "docker" group exists 
#   hosts: web  # Replace with the target hosts or groups
#   become: yes 
#   gather_facts: false
#   tasks:
#     - name: Start the Docker service
#       service:
#         name: docker
#         state: started
    
#     # - name: Create the 'docker' group if it doesn't exist
#     #   group:
#     #     name: docker
#     #     state: present

# - name: Set up Nexus user and change ownership
#   hosts: web
#   become: yes  # Run tasks with elevated privileges

#   tasks:
#     - name: Create the Nexus group
#       ansible.builtin.group:
#         name: docker  #create the group with name "docker"
#         state: present  # Ensure that the group exists. If not, create the group.

#     - name: Create the princewillopah user
#       ansible.builtin.user:
#         name: princewillopah  # Set the username to 'princewillopah'
#         groups: "adm,docker"  # also ad the user to admin group so the user can have access to some file-- else error
#         createhome: yes  # Create a home directory for the '/home/princewillopah' user


# - name: Pull Nginx Docker image
#   hosts: web  # Replace with the target hosts or groups
#   # become: yes 
#   become_user: princewillopah
#   gather_facts: false
#   vars:
#     container_name: my_nginx  # Define a variable for the container name
#     default_container_image: nginx:latest
#   tasks:
#     - name: Pull Nginx Docker image
#       community.docker.docker_image:
#         name: "{{ default_container_image }}"
#         source: pull

#     - name: Run Nginx Container
#       docker_container:
#         name: "{{ container_name }}"
#         image: "{{ default_container_image }}"
#         state: started
#         ports:
#           - "8080:80"


# ====================================================================================================================================================================================
# install docker with created user and roles
# ====================================================================================================================================================================================
# ---
# - name: Install Docker
#   hosts: web  # Replace with the target hosts or groups
#   become: yes 
#   tasks:
#     - name: Update package cache
#       apt:
#         update_cache: yes
#       when: ansible_os_family == 'Debian'  # Use appropriate condition for your OS
    
#     - name: Install Docker
#       apt:
#         name: docker.io
#         state: present
#       when: ansible_os_family == 'Debian'  # Use appropriate condition for your OS

#     - name: Install Node.js
#       apt:
#         name: nodejs
#         state: present
#       become: yes

#     - name: Install npm
#       apt:
#         name: npm
#         state: present
#       become: yes

#     - name: Install pip for Python 3      
#       apt:
#         name: python3-pip
#         state: present

#     - name: Install Docker python module for docker commands
#       pip:
#         name: 
#           - docker
#           - docker-compose    


# - name: Install Docker Compose 
#   hosts: web  # Replace with the target hosts or groups
#   become: yes 
#   gather_facts: false
#   tasks:
#     - name: Download Docker Compose binary
#       get_url:
#         # url: https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-{{lookup('pipe','uname -m')}}
#         url: https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64
#         dest: /usr/local/bin/docker-compose
#         mode: +x

#     - name: Verify Docker Compose version
#       command: docker-compose --version
#       register: compose_version_output
#       changed_when: false
#       failed_when: false

#     - name: Install Docker Compose if not installed
#       command: echo
#       args:
#         creates: /usr/local/bin/docker-compose
#       changed_when: false

#     - name: Add Docker Compose to PATH
#       lineinfile:
#         dest: ~/.bashrc
#         line: 'export PATH=\$PATH:/usr/local/bin'
#         state: present
#       when: "'No such file or directory' in compose_version_output.stdout"

#     - name: Reload the shell
#       command: source ~/.bashrc
#       when: "'No such file or directory' in compose_version_output.stdout"

# - name: Start the Docker service || ensure the "docker" group exists 
#   hosts: web  # Replace with the target hosts or groups
#   become: yes 
#   gather_facts: false
#   tasks:
#     - name: Start the Docker service
#       service:
#         name: docker
#         state: started
    
#     # - name: Create the 'docker' group if it doesn't exist
#     #   group:
#     #     name: docker
#     #     state: present

# - name: Configure passwordless sudo for princewillopah user by Adding passwordless sudoers entry for princewillopah
#   hosts: web
#   become: yes
#   tasks:
#     - name: Create the docker group
#       ansible.builtin.group:
#         name: docker  #create the group with name "docker"
#         state: present  # Ensure that the group exists. If not, create the group.

#     - name: Create the princewillopah user
#       ansible.builtin.user:
#         name: princewillopah  # Set the username to 'princewillopah'
#         groups: "adm,docker"  # also add the user to the admin and docker groups
#         createhome: yes  # Create a home directory for the '/home/princewillopah' user

# - name: Create a React Docker image
#   hosts: web  # Replace with your target hosts or groups
#   become_user: princewillopah
#   gather_facts: false
#   tasks:
#     # - name: Create parent directory /home/princewillopah/opt
#     #   ansible.builtin.file:
#     #     path: /home/princewillopah/opt
#     #     state: directory
#     - name: Create a directory for the React app
#       ansible.builtin.file:
#         path: /home/princewillopah/opt/react-app
#         state: directory

#     - name: Copy the React app source code
#       ansible.builtin.copy:
#         src: /home/princewillopah/DevOps-World/Docker/Test-projects/react-hello-world/my-app
#         dest: /home/princewillopah/opt/react-app

#     - name: Change working directory
#       ansible.builtin.command:
#         cmd: cd /home/princewillopah/opt/react-app

#     # - name: Install app dependencies
#     #   command: npm install

#     # - name: Build Docker image
#     #   command: docker_image
#     #   docker_image:
#     #     name: my-react-app
#     #     path: /opt/react-app
#     #     state: present

#     # - name: Run Docker container
#     #   command: docker_container
#     #   docker_container:
#     #     name: react-app-container
#     #     image: my-react-app
#     #     state: started
#     #     ports:
#     #       - "3000:3000"
  # ==============================================================        
---
- name: Install Docker
  hosts: web  # Replace with the target hosts or groups
  become: yes 
  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
      when: ansible_os_family == 'Debian'  # Use appropriate condition for your OS
    
    - name: Install Docker
      apt:
        name: docker.io
        state: present
      when: ansible_os_family == 'Debian'  # Use appropriate condition for your OS

    - name: Install Node.js
      apt:
        name: nodejs
        state: present

    - name: Install npm
      apt:
        name: npm
        state: present
    - name: Install pip for Python 3      
      apt:
        name: python3-pip
        state: present

    - name: Install Docker python module for docker commands
      pip:
        name: 
          - docker
          - docker-compose    


- name: Install Docker Compose 
  hosts: web  # Replace with the target hosts or groups
  become: yes 
  gather_facts: false
  tasks:
    - name: Download Docker Compose binary
      get_url:
        # url: https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-{{lookup('pipe','uname -m')}}
        url: https://github.com/docker/compose/releases/latest/download/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: +x

    - name: Verify Docker Compose version
      command: docker-compose --version
      register: compose_version_output
      changed_when: false
      failed_when: false

    - name: Install Docker Compose if not installed
      command: echo
      args:
        creates: /usr/local/bin/docker-compose
      changed_when: false

    - name: Add Docker Compose to PATH
      lineinfile:
        dest: ~/.bashrc
        line: 'export PATH=\$PATH:/usr/local/bin'
        state: present
      when: "'No such file or directory' in compose_version_output.stdout"

    - name: Reload the shell
      command: source ~/.bashrc
      when: "'No such file or directory' in compose_version_output.stdout"

- name: Start the Docker service || ensure the "docker" group exists 
  hosts: web  # Replace with the target hosts or groups
  become: yes 
  gather_facts: false
  tasks:
    - name: Start the Docker service
      service:
        name: docker
        state: started
    
    - name: Create the 'docker' group if it doesn't exist
      group:
        name: docker
        state: present

- name: Add user to the Docker group 
  hosts: web  # Replace with the target hosts or groups
  become: yes 
  gather_facts: false
  tasks:
    - name: Add user to the Docker group
      user:
        name: princewillopah
        groups: docker
        append: yes
    - name: Reconnect to server session
      meta: reset_connection

- name: Setup for nodejs 
  hosts: web  # Replace with the target hosts or groups
  become: yes
  # become_user: yes 
  gather_facts: false
  tasks:
    - name: Create a directory for the React app
      file:
        path: /home/princewillopah/react-app
        state: directory

    - name: Create a tarball of the Node.js app
      unarchive:
        src: /home/princewillopah/DevOps-World/Ansible/PROJECTS/Docker/my-app/my-app-0.1.0.tgz # Replace with the path to your Node.js app
        dest: /home/princewillopah/
      register: unpack_output
    # - name: Build Docker image2
      # command: mv /home/princewillopah/react-app/package/* /home/princewillopah/react-app/  
    - name: Build Docker image
      command: docker build -t my-react-app /home/princewillopah/package/
      register: docker_build_output
    - debug:
        var: docker_build_output.stdout_lines
    - name: Stop the existing container
      command: docker stop node-app-container
      ignore_errors: yes  # Ignore errors if the container is not running

    - name: Remove the existing container
      command: docker rm node-app-container
      ignore_errors: yes  # Ignore errors if the container doesn't exist

    - name: Run Docker container with the desired name
      command: docker run -d -p 3000:3000 --name node-app-container my-react-app












      # changed_when: false  # Mark this task as non-changing

    # - name: Copy the tarball to the remote server
    #   copy:
    #     src: "{{ pack_output.stdout_lines[0] }}"
    #     dest: /home/princewillopah/my-node-app.tgz  # Replace with the destination on the remote server





#     - name: Change working directory
#       command: cd /opt/react-app

#     - name: Install app dependencies
#       command: npm install

#     - name: Build Docker image
#       docker_image:
#         name: my-react-app
#         path: /opt/react-app
#         state: present

#     - name: Run Docker container
#       docker_container:
#         name: react-app-container
#         image: my-react-app
#         state: started
#         ports:
#           - "3000:3000"

# - name: Pull Nginx Docker image
#   hosts: web  # Replace with the target hosts or groups
#   gather_facts: false
#   vars:
#     container_name: my_nginx  # Define a variable for the container name
#     default_container_image: nginx:latest
#   tasks:
#     - name: Pull Nginx Docker image
#       community.docker.docker_image:
#         name: "{{ default_container_image }}"
#         source: pull

#     - name: Run Nginx Container
#       docker_container:
#         name: "{{ container_name }}"
#         image: "{{ default_container_image }}"
#         state: started
#         ports:
#           - "8080:80"